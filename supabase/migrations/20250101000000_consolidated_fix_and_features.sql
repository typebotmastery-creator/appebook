/*
# [Consolidated Schema Fix and Feature Addition]
This script corrects a data type mismatch in the 'products' table and adds new tables for gamification and user settings.

## Query Description:
- DESTRUCTIVE CHANGE: This script will DROP and RECREATE the 'products' table to fix its primary key type from 'bigint' to 'uuid'. Any data currently in the 'products' table will be lost. This is necessary to ensure schema consistency across the application.
- It then creates tables for 'purchase_history', 'achievements', 'notifications', and 'support_tickets'.
- It adds a 'medal_icon' column to the 'chapters' table.
- It creates a function and trigger to automatically grant achievements and notifications when a chapter is completed.
- It applies Row Level Security (RLS) to all new tables to ensure users can only access their own data.

## Metadata:
- Schema-Category: ["Dangerous", "Structural"]
- Impact-Level: ["High"]
- Requires-Backup: true
- Reversible: false

## Structure Details:
- Modified: 'chapters' table
- Dropped & Recreated: 'products' table
- Created: 'purchase_history', 'achievements', 'notifications', 'support_tickets' tables
- Created: 'handle_chapter_completion' function and 'on_chapter_completion_trigger' trigger

## Security Implications:
- RLS Status: Enabled on all new tables.
- Policy Changes: Yes, new policies are created for all new tables.
- Auth Requirements: Policies are based on auth.uid().
*/

-- Step 1: Clean up previous failed attempts and problematic tables
DROP TRIGGER IF EXISTS on_chapter_completion_trigger ON public.user_progress;
DROP FUNCTION IF EXISTS public.handle_chapter_completion();
DROP TABLE IF EXISTS public.purchase_history;
DROP TABLE IF EXISTS public.achievements;
DROP TABLE IF EXISTS public.notifications;
DROP TABLE IF EXISTS public.support_tickets;
DROP TABLE IF EXISTS public.products;

-- Step 2: Recreate the products table with a UUID primary key for consistency
CREATE TABLE public.products (
    id uuid primary key default uuid_generate_v4(),
    name text not null,
    description text,
    price numeric(10, 2) not null,
    image_url text,
    category text,
    stock integer default 0,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS for products (allow all authenticated users to read)
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated users to read products."
ON public.products FOR SELECT
TO authenticated
USING (true);

-- Re-insert sample products since the table was dropped
INSERT INTO public.products (name, description, price, image_url, category, stock) VALUES
('√ìleo de Massagem Ylang Ylang', 'Um √≥leo de massagem afrodis√≠aco com aroma floral para despertar os sentidos e promover relaxamento profundo.', 79.90, 'https://images.unsplash.com/photo-1599442631558-f9d3a18b104c?w=500', 'object', 50),
('Vela Arom√°tica S√¢ndalo', 'Vela com aroma amadeirado de s√¢ndalo, ideal para criar um ambiente √≠ntimo e sagrado para suas pr√°ticas.', 59.90, 'https://images.unsplash.com/photo-1614586128362-9334215f6f65?w=500', 'object', 100),
('Ebook: A Arte do Toque Consciente', 'Um guia aprofundado sobre t√©cnicas de massagem e toque que promovem conex√£o e cura.', 47.00, 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=500', 'ebook', 999),
('Kit de Cristais Energ√©ticos', 'Uma sele√ß√£o de 7 cristais alinhados com os chakras para equil√≠brio energ√©tico durante a medita√ß√£o.', 129.90, 'https://images.unsplash.com/photo-1612197923234-315e8c55c70c?w=500', 'object', 30);

-- Step 3: Create the purchase_history table with the correct foreign key type
CREATE TABLE public.purchase_history (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.profiles(id) on delete cascade,
    product_id uuid not null references public.products(id) on delete cascade,
    purchased_at timestamp with time zone default timezone('utc'::text, now()) not null,
    price numeric(10, 2) not null,
    quantity integer not null default 1
);

-- RLS for purchase_history
ALTER TABLE public.purchase_history ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own purchase history."
ON public.purchase_history FOR SELECT
USING (auth.uid() = user_id);

-- Step 4: Add gamification and settings tables
-- Add medal icon to chapters table
ALTER TABLE public.chapters
ADD COLUMN IF NOT EXISTS medal_icon text;

-- Update existing chapters with medal icons
UPDATE public.chapters SET medal_icon = 'üåÖ' WHERE "order_index" = 1;
UPDATE public.chapters SET medal_icon = 'üå¨Ô∏è' WHERE "order_index" = 2;
UPDATE public.chapters SET medal_icon = '‚ö°' WHERE "order_index" = 3;
UPDATE public.chapters SET medal_icon = 'ü§ù' WHERE "order_index" = 4;
UPDATE public.chapters SET medal_icon = 'üßò' WHERE "order_index" = 5;
UPDATE public.chapters SET medal_icon = 'üåà' WHERE "order_index" = 6;
UPDATE public.chapters SET medal_icon = 'üé∂' WHERE "order_index" = 7;
UPDATE public.chapters SET medal_icon = '‚òØÔ∏è' WHERE "order_index" = 8;
UPDATE public.chapters SET medal_icon = 'üíÉ' WHERE "order_index" = 9;
UPDATE public.chapters SET medal_icon = 'üéµ' WHERE "order_index" = 10;
UPDATE public.chapters SET medal_icon = 'üïØÔ∏è' WHERE "order_index" = 11;
UPDATE public.chapters SET medal_icon = 'üíï' WHERE "order_index" = 12;
UPDATE public.chapters SET medal_icon = 'üåπ' WHERE "order_index" = 13;
UPDATE public.chapters SET medal_icon = 'üå±' WHERE "order_index" = 14;
UPDATE public.chapters SET medal_icon = '‚ôæÔ∏è' WHERE "order_index" = 15;

-- Create achievements table
CREATE TABLE public.achievements (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.profiles(id) on delete cascade,
    chapter_id integer not null references public.chapters(id) on delete cascade,
    achieved_at timestamp with time zone default timezone('utc'::text, now()) not null,
    unique (user_id, chapter_id)
);
-- RLS for achievements
ALTER TABLE public.achievements ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own achievements."
ON public.achievements FOR SELECT
USING (auth.uid() = user_id);

-- Create notifications table
CREATE TABLE public.notifications (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.profiles(id) on delete cascade,
    title text not null,
    message text not null,
    is_read boolean default false,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
-- RLS for notifications
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own notifications."
ON public.notifications FOR ALL
USING (auth.uid() = user_id);

-- Create support_tickets table
CREATE TABLE public.support_tickets (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.profiles(id) on delete cascade,
    subject text not null,
    message text not null,
    status text not null default 'open', -- e.g., open, in_progress, closed
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);
-- RLS for support_tickets
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own support tickets."
ON public.support_tickets FOR ALL
USING (auth.uid() = user_id);

-- Step 5: Create function and trigger for automatic rewards
CREATE OR REPLACE FUNCTION public.handle_chapter_completion()
RETURNS TRIGGER AS $$
DECLARE
  chapter_title text;
  chapter_medal text;
BEGIN
  -- Only run if is_completed is newly set to true
  IF NEW.is_completed = true AND (OLD IS NULL OR OLD.is_completed = false) THEN
    -- Get chapter details
    SELECT title, medal_icon INTO chapter_title, chapter_medal
    FROM public.chapters
    WHERE id = NEW.chapter_id;

    -- Insert into achievements
    INSERT INTO public.achievements (user_id, chapter_id)
    VALUES (NEW.user_id, NEW.chapter_id)
    ON CONFLICT (user_id, chapter_id) DO NOTHING;

    -- Insert a notification
    INSERT INTO public.notifications (user_id, title, message)
    VALUES (
      NEW.user_id,
      'Cap√≠tulo Conclu√≠do!',
      'Parab√©ns! Voc√™ conquistou a medalha ' || COALESCE(chapter_medal, '‚ú®') || ' por completar o cap√≠tulo "' || chapter_title || '".'
    );
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger
CREATE TRIGGER on_chapter_completion_trigger
AFTER UPDATE ON public.user_progress
FOR EACH ROW
EXECUTE FUNCTION public.handle_chapter_completion();
